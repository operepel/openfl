# Copyright (C) 2020 Intel Corporation
# Licensed subject to the terms of the separately executed evaluation license agreement between Intel Corporation and you.

# Compose an FL plan in YAML
# The plan is consumed by bin/run_simulation_from_flplan.py,
# bin/run_aggregator_from_flplan, bin/run_collaborator_from_flplan, and
# bin/create_initial_weights_file_from_plan.py

# Note the use of yaml anchors and aliases in order to enforce dependencies
# across portions of the config:
# The anochor '&' assigns a name to a piece of the config
# The alias '*' references an achor 

# values for first level keys: model, aggregator, and collaborator
# pass in the generic kwargs for those constructors
# (ex. collaborator id will be collaborator specific)

# values for first level keys: model and data pass in the generic
# kwargs for get_model and get_data functions

# values for the first level key: hostnames is used in the creation of the public
# key infrastructure

# The model version is used to validate model updates
# Aggregator, collaborator, and fed ids (as well as model version) are currently
# used to validate message headers. Collaborator ids are also
# used for identifying the data folder of each collaborator
# (using the local_data_config yaml file)

model_object_init:
  class_to_init: models.tensorflow.keras_test.keras_test.KerasTest 

data_object_init:
  class_to_init: data.tensorflow.tfmnist_inmemory.TensorFlowMNISTInMemory
  data_name_in_local_config: mnist_shard
  init_kwargs:
    nb_collaborators  : 2
    batch_size        : 256

aggregator_object_init:
  init_kwargs:
    rounds_to_train   : 10
    init_model_fname  : keras_cnn_mnist_init.pbuf
    latest_model_fname: keras_cnn_mnist_latest.pbuf
    best_model_fname  : keras_cnn_mnist_best.pbuf

collaborator_object_init:
  init_kwargs:
    opt_treatment: RESET
    send_model_deltas: true

network_object_init:
  defaults_file : defaults/network.yaml

tasks:
  demo_dummy_function:
    function  : dummy_function
    kwargs    :
      metric_name_prefix : 'basic_metric'

task_assigner:
  module_name     : tfedlrn.task_assigner.random_grouped_task_assigner
  class_name      : RandomGroupedTaskAssigner
  task_groups     :
  - name: dummy_group
    percentage: 1.0
    tasks:
    - demo_dummy_function
