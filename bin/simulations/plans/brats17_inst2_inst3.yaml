# Compose an SFL "Simulation FL" plan in JSON/YAML.
# * The plan is consumed by bin/run_sim_from_sflplan.py and 
# * bin/create_initial_weights_file_from_plan.py 

# * values for first level keys: model, aggregator, and collaborator
# * pass in the generic kwargs for those constructors
# * (ex. collaborator id will be collaborator specific)

# * values for first level keys: model and data pass in the generic 
# * kwargs for get_model and get_data functions

# * The model version is used to validate model updates
# * Aggregator, collaborator, and fed ids (as well as model version) are currently
# * used to validate message headers. Collaborator ids are also 
# * used for identifying the data folder of each collaborator
# * (using the local_data_config yaml file)

# * Added by the coordinator later: agg_id, agg_url, poll_interval.

# We may have several plans for one dataset, to search the best model architecture for exammple.

description     : Train a model to perform semantic segmentation on brain fMRI images.
status          : active

federation:
  fed_id: &fed_id 'fed_0'
  opt_treatment: &opt_treatment 'AGG'
  polling_interval: &polling_interval 4
  rounds: 30
  agg_id: &agg_id 'agg_0'
  
  col_ids: &col_ids
    - 'col_2'
    - 'col_3'

  init_model_fname: UNet2D_TF_init.pbuf
  latest_model_fname: UNet2D_TF_latest.pbuf
  best_model_fname: UNet2D_TF_best.pbuf
  model_version: &model_version 1

model:
  code_path: models.unet2d_tf.unet2d_tf
  class_name: UNet2D_TF

aggregator:
  agg_id: *agg_id
  fed_id: *fed_id
  col_ids: *col_ids

  
collaborator:
  agg_id : *agg_id
  fed_id : *fed_id
  model_version : *model_version
  polling_interval: *polling_interval
  opt_treatment: *opt_treatment

data:
  data_name: brats 
  code_path: models.data 
  class_name: BratsData
  percent_train: 0.8
  batch_size: 64

