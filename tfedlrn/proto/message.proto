syntax = 'proto2';

package tfedlrn_proto;

// we start with everything as "required" while developing / debugging. This forces correctness better.
// FIXME: move to "optional" once development is complete


// FIXME: current convention requriers field name is same as class name in lowercase. Not good.
message FLMessage {
    oneof payload {
        LocalModelUpdate localmodelupdate = 1; 
        LocalValidationResults localvalidationresults = 2;
        JobRequest jobrequest = 3;
        ModelDownloadRequest modeldownloadrequest = 4;
        GlobalModelUpdate globalmodelupdate = 5;
        JobReply jobreply = 6;
        LocalModelUpdateAck localmodelupdateack = 7;
        LocalValidationResultsAck localvalidationresultsack = 8;
    }
}

enum Job {
    JOB_TRAIN = 0;
    JOB_VALIDATE = 1;
    JOB_YIELD = 2;
    JOB_QUIT = 3;
    JOB_DOWNLOAD_MODEL = 4;
}

message TensorProto {
    required string name = 1;
    repeated int32 shape = 2;
    repeated float values = 3; 
}

// Everything but 'sender' is effectively just for sanity checking during testing
message MessageHeader {
    required string sender = 1;
    required string recipient = 2;
    required string federation_id = 3;
    // FIXME: really a nonce
    required int32 counter = 4; // FIXME: better sanity check device?
}

message ModelHeader {
    required string id = 1;
    // FIXME: is this version or rounds trained? We need to know rounds trained somewhere, and this currently does track that
    required int32 version = 2;
}

message ModelProto {
    required ModelHeader header = 1;
    repeated TensorProto tensors = 2;
}

// COLLABORATOR MESSAGES

message LocalModelUpdate {
    required MessageHeader header = 1;
    required ModelProto model = 2;
    required int32 data_size = 3;
    required float loss = 4;
}

message LocalValidationResults {
    required MessageHeader header = 1;
    required ModelHeader model_header = 2;
    required float results = 3;
    required int32 data_size = 4;
}

message JobRequest {
    required MessageHeader header = 1;
    required ModelHeader model_header = 2;
}

message ModelDownloadRequest {
    required MessageHeader header = 1;
    required ModelHeader model_header = 2;
}

message RoundTaskQuery {
    required MessageHeader header = 1;
    map<string, int32> task_results_last_sync = 2;
}

// AGGREGATOR MESSAGES

message GlobalModelUpdate {
    required MessageHeader header = 1;
    required ModelProto model = 2;
}

message JobReply {
    required MessageHeader header = 1;
    required Job job = 2;
}

message LocalModelUpdateAck {
    required MessageHeader header = 1;
}

message LocalValidationResultsAck {
    required MessageHeader header = 1;
}
