// Copyright (C) 2020 Intel Corporation
// Licensed subject to the terms of the separately executed evaluation license agreement between Intel Corporation and you.

service Aggregator {
    rpc GetTasks(TasksRequest)              returns (TasksResponse) {}
    rpc GetTensor(TensorRequest)  returns (TensorResponse) {}
    rpc SendLocalTaskResults(TaskResults)   returns (Acknowledgement) {}
}

message TasksResponse {
    required int32          round_number    = 2;
    repeated string         tasks           = 3;  // these next three are exclusive. Oneof is probably a good idea
    required int32          sleep_time      = 4;  // these three are exclusive
    required bool           quit            = 5;  // these three are exclusive
}

message TensorRequest {
    required TensorKey tensor_key = 2;
}

// we'll actually send this as a data stream
message TensorResponse {
    required Tensor         tensor          = 2;
}

// we'll actually send this as a data stream
message TaskResults {
    required string         task_name       = 3;
    repeated Tensor         tensors         = 4;    
}

message Acknowledgement {
    required MessageHeader header = 1;
}

message Tensor {
    required TensorKey      name                    = 1;
    required bytes          data_bytes              = 5;
}