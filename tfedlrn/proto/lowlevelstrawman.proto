// Copyright (C) 2020 Intel Corporation
// Licensed subject to the terms of the separately executed evaluation license agreement between Intel Corporation and you.

service Aggregator {
    rpc GetTasks(TasksRequest)              returns (TasksResponse) {}
    rpc GetAggregatedTensor(TensorRequest)  returns (TensorResponse) {}
    rpc SendLocalTaskResults(TaskResults)   returns (Acknowledgement) {}
}

message MessageHeader {
    required string sender = 1;
    required string receiver = 2;
    required string federation_uuid = 3;
}

message TasksRequest {
    required MessageHeader header = 1;
}

message TasksResponse {
    required MessageHeader  header          = 1;
    required int32          round_number    = 2;
    repeated string         tasks           = 3;  // these next three are exclusive. Oneof is probably a good idea
    required int32          sleep_time      = 4;  // these three are exclusive
    required bool           quit            = 5;  // these three are exclusive
}

message TensorRequest {
    required MessageHeader   header          = 1;
    required int32           round_number    = 2;
    required string          tensor_name     = 3;
}

// we'll actually send this as a data stream
message TensorResponse {
    required MessageHeader   header          = 1;
    required int32           round_number    = 2;
    required NamedTensor     tensor          = 3;
}

// we'll actually send this as a data stream
message TaskResults {
    required MessageHeader  header          = 1;
    required int32          round_number    = 2;
    required string         task_name       = 3;
    repeated NamedTensor    tensors         = 4;    
}

message Acknowledgement {
    required MessageHeader header = 1;
}

message NamedTensor {
    required string         name                    = 1;
    required int32          round_number            = 2;
    repeated string         tags                    = 3;
    repeated MetadataProto  transformer_metadata    = 4;
    required bytes          data_bytes              = 5;
}

message MetadataProto {
    map<int32, float>   int_to_float    = 1;
    repeated int32      int_list        = 2;
    repeated bool       bool_list       = 3;
}
