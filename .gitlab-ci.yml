image: alpine
#image: ubuntu:18.04 

# before_script:
#   - mkdir -p $HOME/.docker/
#   - 'echo "{ \"proxies\": { \"default\": { \"httpProxy\": \"http://proxy-us.intel.com:911\", \"httpsProxy\": \"http://proxy-us.intel.com:912\", \"noProxy\": \"intel.com,.intel.com,10.0.0.0/8,192.168.0.0/16,localhost,127.0.0.0/8,134.134.0.0/16\" } } }" > $HOME/.docker/config.json'
stages:
    - build
    - test

pages:
  stage: build
  script:
  - export http_proxy=http://proxy-us.intel.com:911
  - export https_proxy=http://proxy-us.intel.com:912
  - export no_proxy=docker:2375,docker:2376,intel.com,.intel.com,10.0.0.0/8,192.168.0.0/16,localhost,127.0.0.0/8,134.134.0.0/16
  - apk --no-cache add py3-pip python3-dev
  - apk --no-cache add musl-dev linux-headers g++

  - pip3 install sphinx sphinx_rtd_theme sphinxcontrib.napoleon
  - pip3 install numpy pyyaml
  - pip3 install protobuf
  
  - apk --no-cache add make
  - cd docs
  - sphinx-apidoc -f -o . ../tfedlrn
  - sphinx-apidoc -f -o . ../models
  - make html
  - mv _build/html/ ../public/
  artifacts:
    paths:
    - public
  only:
  - master

image: ubuntu:18.04

#cache:
#  key: make_install
#  paths:
#  - venv
#  policy: push

test_pt_cnn_mnist:
    stage: test
    #variables: 
    #  http_proxy: 'http://proxy-us.intel.com:911'
    #  https_proxy: 'http://proxy-us.intel.com:912'
    #  no_proxy: 'docker:2375,docker:2376,intel.com,.intel.com,10.0.0.0/8,192.168.0.0/16,localhost,127.0.0.0/8,134.134.0.0/16'
    before_script:
    - export http_proxy=http://proxy-us.intel.com:911
    - export https_proxy=http://proxy-us.intel.com:912
    - export no_proxy=docker:2375,docker:2376,intel.com,.intel.com,10.0.0.0/8,192.168.0.0/16,localhost,127.0.0.0/8,134.134.0.0/16
    - apt-get update -qy
    - apt-get install -y python3-venv python3-pip build-essential musl-dev g++
    - python3 -m pip --version
    - make install
    cache:
      key: make_install
      paths:
      - venv
    script: 
    - cd bin/
    - ../venv/bin/python create_initial_weights_file_from_flplan.py -p pt_cnn_withmnist.yaml
    - ../venv/bin/python run_simulation_from_flplan.py -p pt_cnn_withmnist.yaml
    only:
    - 101-Build-GitLab-CI-testing-tool-fundamentals

test_pt_cnn_cifar10:
    stage: test
    before_script:
    - export http_proxy=http://proxy-us.intel.com:911
    - export https_proxy=http://proxy-us.intel.com:912
    - export no_proxy=docker:2375,docker:2376,intel.com,.intel.com,10.0.0.0/8,192.168.0.0/16,localhost,127.0.0.0/8,134.134.0.0/16
    - apt-get update -qy
    - apt-get install -y python3-venv python3-pip build-essential musl-dev g++
    - python3 -m pip --version
    cache:
      key: make_install
      policy: pull
      paths:
      - venv
    script: 
    - ls
    - cd bin/
    - ../venv/bin/python create_initial_weights_file_from_flplan.py -p pt_cnn_withcifar10.yaml
    - CUDA_VISIBLE_DEVICES=0 ../venv/bin/python run_simulation_from_flplan.py -p pt_cnn_withcifar10.yaml
    only:

test_tf_resnet_mnist:
    stage: test
    before_script:
    - export http_proxy=http://proxy-us.intel.com:911
    - export https_proxy=http://proxy-us.intel.com:912
    - export no_proxy=docker:2375,docker:2376,intel.com,.intel.com,10.0.0.0/8,192.168.0.0/16,localhost,127.0.0.0/8,134.134.0.0/16
    - apt-get update -qy
    - apt-get install -y python3-venv python3-pip build-essential musl-dev g++
    - python3 -m pip --version
    cache:
      key: make_install
      policy: pull
      paths:
      - venv
    script: 
    - ls
    - cd bin/
    - ../venv/bin/python create_initial_weights_file_from_flplan.py -p tf_resnet_withmnist.yaml
    - CUDA_VISIBLE_DEVICES=1 ../venv/bin/python run_simulation_from_flplan.py -p tf_resnet_withmnist.yaml
    only:
    - 101-Build-GitLab-CI-testing-tool-fundamentals
